name: Streamlit CD
on:
  workflow_run:
    workflows: ["CI Workflow"]  # Exécute seulement si le workflow CI a été exécuté
    types:
      - completed
    branches:
      - main

env:
  DOCKER_IMAGE: prediction_donnees_immobilieres-streamlit_app
  CONTAINER_NAME: prediction_donnees_immobilieres-streamlit_app-1
  PORT: 8501

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v3

      - name: 🐳 Installation de Docker
        run: |
          # Suppression des anciennes versions
          for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done

          # Installation des prérequis
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl gnupg

          # Ajout du repository officiel Docker
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          sudo chmod a+r /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo $VERSION_CODENAME) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          # Installation de Docker
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      - name: 🔨 Construction de l'image Docker
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }} .

      - name: 🚀 Démarrage du conteneur
        run: |
          docker stop ${{ env.CONTAINER_NAME }} || true
          docker rm ${{ env.CONTAINER_NAME }} || true
          docker run -d --name ${{ env.CONTAINER_NAME }} -p ${{ env.PORT }}:${{ env.PORT }} ${{ env.DOCKER_IMAGE }}

      - name: 🛠️ Vérification des ports exposés
        run: |
          docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Ports}}"

      - name: ⏳ Attente que l'application soit en ligne
        run: |
          echo "Attente de l'application sur le port ${{ env.PORT }}..."
          # On vérifie toutes les 5 secondes pendant 60 secondes (12 tentatives)
          for i in {1..12}; do
            if curl -s http://localhost:${{ env.PORT }} >/dev/null; then
              echo "L'application est en ligne !"
              exit 0
            fi
            echo "Tentative $i : l'application n'est pas encore en ligne, attente de 5 secondes..."
            sleep 5
          done
          echo "L'application n'est toujours pas en ligne après 60 secondes."
          exit 1

      - name: 🌍 Configuration de Ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt-get update && sudo apt-get install -y ngrok
          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

      - name: 🔗 Exposition via Ngrok
        run: |
          nohup ngrok http ${{ env.PORT }} > ngrok.log 2>&1 &
          sleep 10
          curl -s http://127.0.0.1:4040/api/tunnels
