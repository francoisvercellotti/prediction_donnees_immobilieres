import streamlit as st
import requests
import pandas as pd
import pickle
import mlflow.pyfunc

# Charger les encodeurs
with open("models/encoders.pickle", "rb") as f:
    encoders = pickle.load(f)

# Fonction pour r√©cup√©rer les coordonn√©es GPS
def get_coordinates(address):
    url = "https://nominatim.openstreetmap.org/search"
    params = {"q": address, "format": "json", "limit": 1}
    response = requests.get(url, params=params)

    if response.status_code == 200 and response.json():
        data = response.json()[0]
        return float(data["lat"]), float(data["lon"])
    return None, None

# Fonction pour r√©cup√©rer la r√©gion √† partir des coordonn√©es GPS
def get_region_from_coordinates(lat, lon):
    url = "https://nominatim.openstreetmap.org/reverse"
    params = {"lat": lat, "lon": lon, "format": "json"}
    response = requests.get(url, params=params)

    if response.status_code == 200 and response.json():
        address_data = response.json().get("address", {})
        return address_data.get("state", "R√©gion inconnue")
    return "R√©gion inconnue"

# Fonction pour charger le mod√®le MLflow
def load_model(model_uri):
    try:
        model = mlflow.pyfunc.load_model(model_uri)
        st.success(f"‚úÖ Mod√®le charg√© depuis {model_uri}")
        return model
    except Exception as e:
        st.error(f"‚ùå Erreur lors du chargement du mod√®le: {e}")
        return None

# Interface Streamlit
st.title("üè° Pr√©diction de Prix Immobilier avec Adresse üìç")

# Entr√©e de l'URI du mod√®le
model_uri = st.text_input("Entrez l'URI du mod√®le MLflow", "runs:/<run_id>/model")
if st.button("Charger le mod√®le"):
    model = load_model(model_uri)
    st.session_state.model = model

# Saisie de l'adresse
address = st.text_input("üìç Entrez l'adresse du bien immobilier")

if st.button("Obtenir les coordonn√©es GPS"):
    latitude, longitude = get_coordinates(address)

    if latitude and longitude:
        st.success(f"üìå Coordonn√©es GPS : {latitude}, {longitude}")
        region = get_region_from_coordinates(latitude, longitude)
        st.success(f"üåç R√©gion d√©tect√©e : {region}")

        # Encodage de la r√©gion
        if region in encoders["nom_region"]:
            encoded_region = encoders["nom_region"].transform([[region]])[0]
        else:
            encoded_region = [0, 0, 0, 0]  # Si la r√©gion n'est pas connue

        # Demande d'autres caract√©ristiques
        vefa = st.selectbox("Vente en l'√©tat futur d'ach√®vement (VEFA)", [0, 1])
        surface_habitable = st.number_input("Surface habitable (m¬≤)")
        mois_transaction = st.slider("Mois de transaction", 1, 12)
        annee_transaction = st.number_input("Ann√©e de transaction", min_value=2000, max_value=2030, step=1)
        prix_m2_moyen_mois_precedent = st.number_input("Prix moyen au m¬≤ le mois pr√©c√©dent")
        nb_transactions_mois_precedent = st.number_input("Nombre de transactions le mois pr√©c√©dent")
        ville_demandee = st.selectbox("Bien situ√© dans une ville demand√©e", [0, 1])

        # S√©lection et encodage du type de bien
        type_batiment = st.selectbox("Type de b√¢timent", ["Appartement", "Maison"])
        encoded_type_batiment = 1 if type_batiment == "Maison" else 0

        # Cr√©ation du DataFrame final
        input_data = pd.DataFrame([{
            "vefa": vefa,
            "surface_habitable": surface_habitable,
            "latitude": latitude,
            "longitude": longitude,
            "mois_transaction": mois_transaction,
            "annee_transaction": annee_transaction,
            "prix_m2_moyen_mois_precedent": prix_m2_moyen_mois_precedent,
            "nb_transactions_mois_precedent": nb_transactions_mois_precedent,
            "ville_demandee": ville_demandee,
            "type_batiment_Maison": encoded_type_batiment,
            "nom_region_Nouvelle-Aquitaine": encoded_region[0],
            "nom_region_Occitanie": encoded_region[1],
            "nom_region_Provence-Alpes-C√¥te d'Azur": encoded_region[2],
            "nom_region_√éle-de-France": encoded_region[3]
        }])

        st.write("üìä **Donn√©es format√©es pour la pr√©diction** :", input_data)

        # Lancer la pr√©diction si le mod√®le est charg√©
        if "model" in st.session_state:
            model = st.session_state.model
            if st.button("Effectuer la pr√©diction"):
                predictions = model.predict(input_data)
                st.write("üí∞ **Pr√©diction du prix du bien** :", predictions[0])
        else:
            st.warning("‚ö† Veuillez charger un mod√®le avant de faire une pr√©diction.")

